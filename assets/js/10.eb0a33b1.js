(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{415:function(t,s,a){"use strict";a.r(s);var n=a(58),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"设计模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("#")]),t._v(" 设计模式")]),t._v(" "),a("p",[t._v("设计模式的核心思想——封装变化")]),t._v(" "),a("p",[t._v("最小化 —— 将变与不变分离，确保变化的部分灵活、不变的部分稳定。")]),t._v(" "),a("p",[t._v("SOLID 设计原则")]),t._v(" "),a("ul",[a("li",[t._v("🚀 单一功能原则（Single Responsibility Principle）")]),t._v(" "),a("li",[t._v("🚀 开放封闭原则（Opened Closed Principle）")]),t._v(" "),a("li",[t._v("里式替换原则（Liskov Substitution Principle）")]),t._v(" "),a("li",[t._v("接口隔离原则（Interface Segregation Principle）")]),t._v(" "),a("li",[t._v("依赖反转原则（Dependency Inversion Principle）")])]),t._v(" "),a("h2",{attrs:{id:"创建型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建型"}},[t._v("#")]),t._v(" 创建型")]),t._v(" "),a("h3",{attrs:{id:"工厂模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式"}},[t._v("#")]),t._v(" 工厂模式")]),t._v(" "),a("p",[t._v("工厂模式其实就是将创建对象的过程单独封装")]),t._v(" "),a("h4",{attrs:{id:"简单工厂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单工厂"}},[t._v("#")]),t._v(" 简单工厂")]),t._v(" "),a("p",[t._v("为了无脑传参 创建对象")]),t._v(" "),a("h4",{attrs:{id:"抽象工厂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抽象工厂"}},[t._v("#")]),t._v(" 抽象工厂")]),t._v(" "),a("p",[t._v("尝试去分离一个系统中变与不变的部分")]),t._v(" "),a("p",[t._v("对于复杂场景 需要先定义一些不变的超级工厂 来创建一些其他工厂")]),t._v(" "),a("p",[t._v("抽象工厂是佐证“开放封闭原则”的良好素材")]),t._v(" "),a("h3",{attrs:{id:"单例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单例"}},[t._v("#")]),t._v(" 单例")]),t._v(" "),a("p",[t._v("保证一个类仅有一个实例，并提供一个访问它的全局访问点，这样的模式就叫做单例模式")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Demo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("show")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Demo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("Demo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      Demo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Demo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Demo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"原型模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型模式"}},[t._v("#")]),t._v(" 原型模式")]),t._v(" "),a("p",[t._v("原型编程范式的核心思想就是利用实例来描述对象，用实例作为定义对象和继承的基础。在 JavaScript 中，原型编程范式的体现就是基于原型链的继承")]),t._v(" "),a("p",[t._v("时刻提醒自己明白")]),t._v(" "),a("p",[t._v("实例\n原型对象\n构造函数")]),t._v(" "),a("h2",{attrs:{id:"结构型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构型"}},[t._v("#")]),t._v(" 结构型")]),t._v(" "),a("h3",{attrs:{id:"装饰器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器"}},[t._v("#")]),t._v(" 装饰器")])])}),[],!1,null,null,null);s.default=e.exports}}]);