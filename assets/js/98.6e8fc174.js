(window.webpackJsonp=window.webpackJsonp||[]).push([[98],{503:function(t,a,e){"use strict";e.r(a);var r=e(58),v=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"📚-javascript-高级程序设计-第-4-版"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#📚-javascript-高级程序设计-第-4-版"}},[t._v("#")]),t._v(" 📚 JavaScript 高级程序设计（第 4 版）")]),t._v(" "),e("h2",{attrs:{id:"第-1-章-什么是-javascript"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第-1-章-什么是-javascript"}},[t._v("#")]),t._v(" 第 1 章 什么是 JavaScript")]),t._v(" "),e("blockquote",[e("p",[t._v("1995 年，JavaScript 问世。当时，它的主要用途是代替 Perl 等服务器端语言处理输入验证。")])]),t._v(" "),e("ol",[e("li",[t._v("ECMAScript：由 ECMA-262 定义并提供核心功能")]),t._v(" "),e("li",[t._v("文档对象模型（DOM）：提供与网页内容交互的方法和接口")]),t._v(" "),e("li",[t._v("浏览器对象模型（BOM）：提供与浏览器交互的方法和接口")])]),t._v(" "),e("h3",{attrs:{id:"dom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dom"}},[t._v("#")]),t._v(" DOM")]),t._v(" "),e("blockquote",[e("p",[t._v("文档对象模型（DOM，Document Object Model）是一个应用编程接口（API），用于在 HTML 中使\n用扩展的 XML。DOM 将整个页面抽象为一组分层节点。HTML 或 XML 页面的每个组成部分都是一种\n节点，包含不同的数据。")])]),t._v(" "),e("ul",[e("li",[t._v("DOM 的级别\n"),e("ul",[e("li",[t._v("DOM Level 1 的目标是映射文档结构")]),t._v(" "),e("li",[t._v("DOM Level 2 新增了以下模块\n"),e("ul",[e("li",[t._v("DOM 视图：描述追踪文档不同视图（如应用 CSS 样式前后的文档）的接口")]),t._v(" "),e("li",[t._v("DOM 事件：描述事件及事件处理的接口")]),t._v(" "),e("li",[t._v("DOM 样式：描述处理元素 CSS 样式的接口")]),t._v(" "),e("li",[t._v("DOM 遍历和范围：描述遍历和操作 DOM 树的接口")])])]),t._v(" "),e("li",[t._v("DOM Level 3 进一步扩展了 DOM，增加了以统一的方式加载和保存文档的方法")])])])]),t._v(" "),e("h3",{attrs:{id:"bom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bom"}},[t._v("#")]),t._v(" BOM")]),t._v(" "),e("blockquote",[e("p",[t._v("IE3 和 Netscape Navigator 3 提供了浏览器对象模型（BOM） API，用于支持访问和操作浏览器的窗口")])]),t._v(" "),e("p",[t._v("BOM 主要针对浏览器窗口和子窗口（frame）")]),t._v(" "),e("ul",[e("li",[t._v("弹出新浏览器窗口的能力（window.open()）")]),t._v(" "),e("li",[t._v("移动、缩放和关闭浏览器窗口的能力")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator",target:"_blank",rel:"noopener noreferrer"}},[t._v("navigator"),e("OutboundLink")],1),t._v(" 对象，提供关于浏览器的详尽信息")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Location",target:"_blank",rel:"noopener noreferrer"}},[t._v("location"),e("OutboundLink")],1),t._v(" 对象，提供浏览器加载页面的详尽信息")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Screen",target:"_blank",rel:"noopener noreferrer"}},[t._v("screen"),e("OutboundLink")],1),t._v(" 对象，提供关于用户屏幕分辨率的详尽信息")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Performance",target:"_blank",rel:"noopener noreferrer"}},[t._v("performance"),e("OutboundLink")],1),t._v(" 对象，提供浏览器内存占用、导航行为和时间统计的详尽信息")]),t._v(" "),e("li",[t._v("对 cookie 的支持")]),t._v(" "),e("li",[t._v("其他自定义对象，如 XMLHttpRequest 和 IE 的 ActiveXObject")])]),t._v(" "),e("h3",{attrs:{id:"兼容性查询"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#兼容性查询"}},[t._v("#")]),t._v(" 兼容性查询")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://developer.mozilla.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("mdn"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://caniuse.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("Can I USE"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"第-2-章-html-中的-javascript"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第-2-章-html-中的-javascript"}},[t._v("#")]),t._v(" 第 2 章 HTML 中的 JavaScript")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("推迟执行脚本")]),t._v(" "),e("blockquote",[e("p",[t._v("HTML 4.01 为"),e("code",[t._v("<script>")]),t._v("元素定义了一个叫 defer 的属性。这个属性表示脚本在执行的时候不会改\n变页面的结构。也就是说，脚本会被延迟到整个页面都解析完毕后再运行。因此，在"),e("code",[t._v("<script>")]),t._v("元素上\n设置 defer 属性，相当于告诉浏览器立即下载，但延迟执行。")])])]),t._v(" "),e("li",[e("p",[t._v("异步执行脚本")]),t._v(" "),e("blockquote",[e("p",[t._v("给脚本添加 async 属性的目的是告诉浏览器，不必等脚本下载和执行完后再加载页面，同样也不必等到\n该异步脚本下载和执行后再加载其他脚本。正因为如此，异步脚本不应该在加载期间修改 DOM")])])])]),t._v(" "),e("h3",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("JavaScript 是通过"),e("code",[t._v("<script>")]),t._v("元素插入到 HTML 页面中的。这个元素可用于把 JavaScript 代码嵌入到\nHTML 页面中，跟其他标记混合在一起，也可用于引入保存在外部文件中的 JavaScript。本章的重点可\n以总结如下。")]),t._v(" "),e("ul",[e("li",[t._v("要包含外部 JavaScript 文件，必须将 src 属性设置为要包含文件的 URL。文件可以跟网页在同\n一台服务器上，也可以位于完全不同的域。")]),t._v(" "),e("li",[t._v("所有"),e("code",[t._v("<script>")]),t._v("元素会依照它们在网页中出现的次序被解释。在不使用 defer 和 async 属性的\n情况下，包含在"),e("code",[t._v("<script>")]),t._v("元素中的代码必须严格按次序解释。")]),t._v(" "),e("li",[t._v("对不推迟执行的脚本，浏览器必须解释完位于"),e("code",[t._v("<script>")]),t._v("元素中的代码，然后才能继续渲染页面\n的剩余部分。为此，通常应该把"),e("code",[t._v("<script>")]),t._v("元素放到页面末尾，介于主内容之后及"),e("code",[t._v("</body>")]),t._v("标签\n之前。")]),t._v(" "),e("li",[t._v("可以使用 defer 属性把脚本推迟到文档渲染完毕后再执行。推迟的脚本原则上按照它们被列出\n的次序执行。")]),t._v(" "),e("li",[t._v("可以使用 async 属性表示脚本不需要等待其他脚本，同时也不阻塞文档渲染，即异步加载。异\n步脚本不能保证按照它们在页面中出现的次序执行。")]),t._v(" "),e("li",[t._v("通过使用"),e("code",[t._v("<noscript>")]),t._v("元素，可以指定在浏览器不支持脚本时显示的内容。如果浏览器支持并启\n用脚本，则"),e("code",[t._v("<noscript>")]),t._v("元素中的任何内容都不会被渲染。")])])])]),t._v(" "),e("h3",{attrs:{id:"思考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#思考"}},[t._v("#")]),t._v(" 思考")]),t._v(" "),e("ul",[e("li",[t._v("link script 引入外部 js 的区别")]),t._v(" "),e("li",[t._v("link 的 "),e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Preloading_content",target:"_blank",rel:"noopener noreferrer"}},[t._v("preload"),e("OutboundLink")],1),t._v(" prefetch 作用\n"),e("ul",[e("li",[t._v("通过 "),e("code",[t._v('rel="preload" as="${type}"')]),t._v("进行内容预加载")]),t._v(" "),e("li",[t._v("通过 "),e("code",[t._v('rel="prefetch"')]),t._v("进行内容懒加载")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/48521680",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用 Preload/Prefetch 优化你的应用"),e("OutboundLink")],1)])])])]),t._v(" "),e("h2",{attrs:{id:"第-3-章-语言基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第-3-章-语言基础"}},[t._v("#")]),t._v(" 第 3 章 语言基础")]),t._v(" "),e("h3",{attrs:{id:"语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[t._v("#")]),t._v(" 语法")]),t._v(" "),e("ul",[e("li",[t._v("最佳实践：ECMAScript 标识符使用驼峰大小写形式，即第一个单词的首字母小写，后面每个单词\n的首字母大写")]),t._v(" "),e("li",[t._v("注释 单行 // 多行 "),e("code",[t._v("/* 1212*/")])])]),t._v(" "),e("h3",{attrs:{id:"变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[t._v("#")]),t._v(" 变量")]),t._v(" "),e("ul",[e("li",[t._v("最佳实践\n"),e("ul",[e("li",[t._v("不使用 var")]),t._v(" "),e("li",[t._v("const 优先 ，let 次之")])])])]),t._v(" "),e("h3",{attrs:{id:"数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),e("p",[t._v("ECMAScript 有 6 中原始类型 Symbol String Number Boolean Undefined BigInt（ECMA2020）\ntypeof 可以判断原始类型,除了 null 因为特殊值 null 被认为是一个对空对象的引用")]),t._v(" "),e("ul",[e("li",[t._v("undefined\n"),e("ul",[e("li",[t._v("永远不必显式地将变量值设置为 undefined")])])]),t._v(" "),e("li",[t._v("null\n"),e("ul",[e("li",[e("code",[t._v('console.log(typeof null); // "object"')])]),t._v(" "),e("li",[t._v("作为空对象初始值")])])]),t._v(" "),e("li",[t._v("boolean\n"),e("ul",[e("li",[t._v("其他值转换为布尔类型的情况\n"),e("table",[e("thead",[e("tr",[e("th",[t._v("数据类型")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("转换为 true 的值")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("转换为 false 的值")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("String")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("非空字符串")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v('""')])]),t._v(" "),e("tr",[e("td",[t._v("Number")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("非零数值（包括无穷值）")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0 NAN")])]),t._v(" "),e("tr",[e("td",[t._v("Symbol")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("任意值")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("--")])]),t._v(" "),e("tr",[e("td",[t._v("BigInt")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("非零数值")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0")])]),t._v(" "),e("tr",[e("td",[t._v("Object")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("任意对象")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("null")])])])])])])]),t._v(" "),e("li",[t._v("number\n"),e("blockquote",[e("p",[t._v("Number 类型使用 IEEE 754 格式表示整\n数和浮点值（在某些语言中也叫双精度值）。")])]),t._v(" "),e("ul",[e("li",[t._v("浮点值\n0.1+0.2 不要测试某个特定的浮点值")]),t._v(" "),e("li",[t._v("值得范围\n"),e("ul",[e("li",[t._v("ECMAScript 可以表示的最小数值保存在 Number.MIN_VALUE 5e-324"),e("br"),t._v("\nNumber.MAX_VALUE 是 1.797 693 134 862 315 7e+308")]),t._v(" "),e("li",[t._v("正无穷 Infinity 负无穷 -Infinity")]),t._v(" "),e("li",[t._v("要确定一个值是不是有限大（即介于 JavaScript 能表示的最小值和最大值之间），可以使用 isFinite()函数，")])])]),t._v(" "),e("li",[t._v("NaN (Not a Number)\n"),e("blockquote",[e("p",[t._v("用于表示本来要返回数值的操作失败了（而不是抛出错误）。")])])]),t._v(" "),e("li",[t._v("其他值转换为数字类型的情况\n"),e("table",[e("thead",[e("tr",[e("th",[t._v("数据类型")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("转换为 true 的值")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("Number")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("直接返回")])]),t._v(" "),e("tr",[e("td",[t._v("Symbol")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("TypeError")])]),t._v(" "),e("tr",[e("td",[t._v("BigInt")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("直接返回")])]),t._v(" "),e("tr",[e("td",[t._v("null")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0")])]),t._v(" "),e("tr",[e("td",[t._v("undefined")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("NaN")])]),t._v(" "),e("tr",[e("td",[t._v("对象")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("调用 valueOf()方法，并按照上述规则转换返回的值。如果转换结果是 NaN，则调用 toString()方法，再按照转换字符串的规则转换。")])])])])]),t._v(" "),e("li",[t._v("字符串转为数字类型\n"),e("ol",[e("li",[t._v('如果字符串包含数值字符，包括数值字符前面带加、减号的情况，则转换为一个十进制数值。因此，Number("1")返回 1，Number("123")返回 123，Number("011")返回 11（忽略前面的零）。')]),t._v(" "),e("li",[t._v('如果字符串包含有效的浮点值格式如"1.1"，则会转换为相应的浮点值（同样，忽略前面的零）。')]),t._v(" "),e("li",[t._v('如果字符串包含有效的十六进制格式如"0xf"，则会转换为与该十六进制值对应的十进制整数值。')]),t._v(" "),e("li",[t._v("如果是空字符串（不包含字符），则返回 0。")]),t._v(" "),e("li",[t._v("如果字符串包含除上述情况之外的其他字符，则返回 NaN。")])])]),t._v(" "),e("li",[t._v("使用 parseInt()转换数字类型取整\n"),e("blockquote",[e("p",[t._v("通常在需要得到整数时可以优先使\n用 parseInt()函数。parseInt()函数更专注于字符串是否包含数值模式。字符串最前面的空格会被\n忽略，从第一个非空格字符开始转换。如果第一个字符不是数值字符、加号或减号，parseInt()立即\n返回 NaN。这意味着空字符串也会返回 NaN（这一点跟 Number()不一样，它返回 0）。如果第一个字符\n是数值字符、加号或减号，则继续依次检测每个字符，直到字符串末尾，或碰到非数值字符。")])])]),t._v(" "),e("li",[t._v("使用 parseFloat()转换数字类型浮点型\n"),e("blockquote",[e("p",[t._v("parseFloat()函数的另一个不同之处在于，它始终忽略字符串开头的零。这个函数能识别前面讨\n论的所有浮点格式，以及十进制格式（开头的零始终被忽略）。十六进制数值始终会返回 0。因为\nparseFloat()只解析十进制值，因此不能指定底数。最后，如果字符串表示整数（没有小数点或者小\n数点后面只有一个零），则 parseFloat()返回整数。")])])])])])]),t._v(" "),e("h2",{attrs:{id:"第-4-章-变量、作用域与内存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第-4-章-变量、作用域与内存"}},[t._v("#")]),t._v(" 第 4 章　变量、作用域与内存")]),t._v(" "),e("h2",{attrs:{id:"第-5-章-基本引用类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第-5-章-基本引用类型"}},[t._v("#")]),t._v(" 第 5 章　基本引用类型")]),t._v(" "),e("h2",{attrs:{id:"第-6-章-集合引用类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第-6-章-集合引用类型"}},[t._v("#")]),t._v(" 第 6 章　集合引用类型")]),t._v(" "),e("h2",{attrs:{id:"第-7-章-迭代器与生成器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第-7-章-迭代器与生成器"}},[t._v("#")]),t._v(" 第 7 章　迭代器与生成器")]),t._v(" "),e("h2",{attrs:{id:"第-8-章-对象、类与面向对象编程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第-8-章-对象、类与面向对象编程"}},[t._v("#")]),t._v(" 第 8 章　对象、类与面向对象编程")]),t._v(" "),e("h2",{attrs:{id:"第-9-章-代理与反射"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第-9-章-代理与反射"}},[t._v("#")]),t._v(" 第 9 章　代理与反射")]),t._v(" "),e("h2",{attrs:{id:"第-10-章-函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第-10-章-函数"}},[t._v("#")]),t._v(" 第 10 章　函数")]),t._v(" "),e("h2",{attrs:{id:"第-11-章-期约与异步函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第-11-章-期约与异步函数"}},[t._v("#")]),t._v(" 第 11 章　期约与异步函数")]),t._v(" "),e("h2",{attrs:{id:"第-12-章-bom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第-12-章-bom"}},[t._v("#")]),t._v(" 第 12 章　 BOM")]),t._v(" "),e("h2",{attrs:{id:"第-13-章-客户端检测"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第-13-章-客户端检测"}},[t._v("#")]),t._v(" 第 13 章　客户端检测")]),t._v(" "),e("h2",{attrs:{id:"第-14-章-dom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第-14-章-dom"}},[t._v("#")]),t._v(" 第 14 章　 DOM")]),t._v(" "),e("h2",{attrs:{id:"第-15-章-dom-扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第-15-章-dom-扩展"}},[t._v("#")]),t._v(" 第 15 章　 DOM 扩展")]),t._v(" "),e("h2",{attrs:{id:"第-16-章-dom2-和-dom3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第-16-章-dom2-和-dom3"}},[t._v("#")]),t._v(" 第 16 章　 DOM2 和 DOM3")]),t._v(" "),e("h2",{attrs:{id:"第-17-章-事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第-17-章-事件"}},[t._v("#")]),t._v(" 第 17 章　事件")]),t._v(" "),e("h2",{attrs:{id:"第-18-章-动画与-canvas-图形"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第-18-章-动画与-canvas-图形"}},[t._v("#")]),t._v(" 第 18 章　动画与 Canvas 图形")]),t._v(" "),e("h2",{attrs:{id:"第-19-章-表单脚本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第-19-章-表单脚本"}},[t._v("#")]),t._v(" 第 19 章　表单脚本")]),t._v(" "),e("h2",{attrs:{id:"第-20-章-javascript-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第-20-章-javascript-api"}},[t._v("#")]),t._v(" 第 20 章　 JavaScript API")]),t._v(" "),e("h2",{attrs:{id:"第-21-章-错误处理与调试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第-21-章-错误处理与调试"}},[t._v("#")]),t._v(" 第 21 章　错误处理与调试")]),t._v(" "),e("h2",{attrs:{id:"第-22-章-处理-xml"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第-22-章-处理-xml"}},[t._v("#")]),t._v(" 第 22 章　处理 XML")]),t._v(" "),e("h2",{attrs:{id:"第-24-章-网络请求与远程资源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第-24-章-网络请求与远程资源"}},[t._v("#")]),t._v(" 第 24 章　网络请求与远程资源")]),t._v(" "),e("h2",{attrs:{id:"第-25-章-客户端存储"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第-25-章-客户端存储"}},[t._v("#")]),t._v(" 第 25 章　客户端存储")]),t._v(" "),e("h2",{attrs:{id:"第-26-章-模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第-26-章-模块"}},[t._v("#")]),t._v(" 第 26 章　模块")]),t._v(" "),e("h2",{attrs:{id:"第-27-章-工作者线程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第-27-章-工作者线程"}},[t._v("#")]),t._v(" 第 27 章　工作者线程")]),t._v(" "),e("h2",{attrs:{id:"第-28-章-最佳实践"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第-28-章-最佳实践"}},[t._v("#")]),t._v(" 第 28 章　最佳实践")])])}),[],!1,null,null,null);a.default=v.exports}}]);