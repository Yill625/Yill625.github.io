(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{475:function(t,a,r){"use strict";r.r(a);var e=r(58),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("p",[r("a",{attrs:{href:"https://github.com/azl397985856/leetcode",target:"_blank",rel:"noopener noreferrer"}},[t._v("算法"),r("OutboundLink")],1)]),t._v(" "),r("h2",{attrs:{id:"_1-可计算一个算法的时间复杂度和空间复杂度-可估计业务逻辑代码的耗时和内存消耗"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-可计算一个算法的时间复杂度和空间复杂度-可估计业务逻辑代码的耗时和内存消耗"}},[t._v("#")]),t._v(" 1.可计算一个算法的时间复杂度和空间复杂度，可估计业务逻辑代码的耗时和内存消耗")]),t._v(" "),r("h2",{attrs:{id:"_2-至少理解五种排序算法的实现原理、应用场景、优缺点-可快速说出时间、空间复杂度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-至少理解五种排序算法的实现原理、应用场景、优缺点-可快速说出时间、空间复杂度"}},[t._v("#")]),t._v(" 2.至少理解五种排序算法的实现原理、应用场景、优缺点，可快速说出时间、空间复杂度")]),t._v(" "),r("h2",{attrs:{id:"_3-了解递归和循环的优缺点、应用场景、并可在开发中熟练应用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-了解递归和循环的优缺点、应用场景、并可在开发中熟练应用"}},[t._v("#")]),t._v(" 3.了解递归和循环的优缺点、应用场景、并可在开发中熟练应用")]),t._v(" "),r("h2",{attrs:{id:"_4-可应用回溯算法、贪心算法、分治算法、动态规划等解决复杂问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-可应用回溯算法、贪心算法、分治算法、动态规划等解决复杂问题"}},[t._v("#")]),t._v(" 4.可应用回溯算法、贪心算法、分治算法、动态规划等解决复杂问题")]),t._v(" "),r("h2",{attrs:{id:"_5-前端处理海量数据的算法方案"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-前端处理海量数据的算法方案"}},[t._v("#")]),t._v(" 5.前端处理海量数据的算法方案")])])}),[],!1,null,null,null);a.default=s.exports}}]);