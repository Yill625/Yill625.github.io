(window.webpackJsonp=window.webpackJsonp||[]).push([[178],{584:function(t,a,e){"use strict";e.r(a);var v=e(58),s=Object(v.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"vue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue"}},[t._v("#")]),t._v(" Vue")]),t._v(" "),e("h2",{attrs:{id:"vue-项目如何做性能优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-项目如何做性能优化"}},[t._v("#")]),t._v(" Vue 项目如何做性能优化")]),t._v(" "),e("h3",{attrs:{id:"代码层面的优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码层面的优化"}},[t._v("#")]),t._v(" 代码层面的优化")]),t._v(" "),e("h4",{attrs:{id:"v-if-v-show"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-if-v-show"}},[t._v("#")]),t._v(" v-if v-show")]),t._v(" "),e("ul",[e("li",[t._v("v-if\nv-if 是 真正 的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建；也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。")]),t._v(" "),e("li",[t._v("v-show\nv-show 就简单得多， 不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 的 display 属性进行切换。")])]),t._v(" "),e("h4",{attrs:{id:"wahch-computed"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#wahch-computed"}},[t._v("#")]),t._v(" wahch computed")]),t._v(" "),e("ul",[e("li",[t._v("watch\n观察某一个值得变化，当值产生变化时，触发相应的处理")]),t._v(" "),e("li",[t._v("computed\n计算属性 某一个值随着其他数据变化而变化 具有缓存性，只有其他属性变化的时候才会重新计算值")])]),t._v(" "),e("h4",{attrs:{id:"v-for-遍历必须为-item-添加-key-且避免同时使用-v-if"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-for-遍历必须为-item-添加-key-且避免同时使用-v-if"}},[t._v("#")]),t._v(" v-for 遍历必须为 item 添加 key，且避免同时使用 v-if")]),t._v(" "),e("ul",[e("li",[t._v("在列表数据进行遍历渲染时，需要为每一项 item 设置唯一 key 值，方便 Vue.js 内部机制精准找到该条列表数据。当 state 更新时，新的状态值和旧的状态值对比，较快地定位到 diff 。")]),t._v(" "),e("li",[t._v("v-for 比 v-if 优先级高，如果每一次都需要遍历整个数组，将会影响速度，尤其是当之需要渲染很小一部分的时候，必要情况下应该替换成 computed 属性")])]),t._v(" "),e("h4",{attrs:{id:"长列表性能优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#长列表性能优化"}},[t._v("#")]),t._v(" 长列表性能优化")]),t._v(" "),e("ul",[e("li",[t._v("Vue 会通过 Object.defineProperty 对数据进行劫持，来实现视图响应数据的变化，然而有些时候我们的组件就是纯粹的数据展示，不会 有任何改变，我们就不需要 Vue 来劫持我们的数据，在大量数据展示的情况下，这能够很明显的减少组件初始化的时间，那如何禁止 Vue 劫持我们的数据呢？可以通过 Object.freeze 方法来冻结一个对象，一旦被冻结的对象就再也不能被修改了。")]),t._v(" "),e("li",[t._v("虚拟列表进行优化\n列表在视图范围内才渲染 DOM")])]),t._v(" "),e("h4",{attrs:{id:"无用的事件记得销毁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#无用的事件记得销毁"}},[t._v("#")]),t._v(" 无用的事件记得销毁")]),t._v(" "),e("h4",{attrs:{id:"图片资源的懒加载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#图片资源的懒加载"}},[t._v("#")]),t._v(" 图片资源的懒加载")]),t._v(" "),e("p",[t._v("对于图片过多的页面，为了加速页面加载速度，所以很多时候我们需要将页面内未出现在可视区域内的图片先不做加载， 等到滚动到可视区域后再去加载。这样对于页面加载性能上会有很大的提升，也提高了用户体验。我们在项目中使用 Vue 的 vue-lazyload 插件")]),t._v(" "),e("h4",{attrs:{id:"路由懒加载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#路由懒加载"}},[t._v("#")]),t._v(" 路由懒加载")])])}),[],!1,null,null,null);a.default=s.exports}}]);