(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{506:function(t,a,s){"use strict";s.r(a);var e=s(58),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"你不知道的-javascript-中卷"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#你不知道的-javascript-中卷"}},[t._v("#")]),t._v(" 你不知道的 JavaScript（中卷）")]),t._v(" "),s("h2",{attrs:{id:"类型和语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型和语法"}},[t._v("#")]),t._v(" 类型和语法")]),t._v(" "),s("h3",{attrs:{id:"类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型"}},[t._v("#")]),t._v(" 类型")]),t._v(" "),s("p",[t._v("最新的 ECMAScript 标准定义了 8 种数据类型")]),t._v(" "),s("p",[t._v("null undefined boolean string number symbol object bigint")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/e6c9d24egy1gzs4l9cp4wj21bc0s6dlh.jpg",alt:""}})]),t._v(" "),s("p",[t._v("typeof 有一个特殊的安全防范机制。对于未定义的变量会返回 undefined")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/e6c9d24egy1gzs52337ysj216p0u0td2.jpg",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#值"}},[t._v("#")]),t._v(" 值")]),t._v(" "),s("h4",{attrs:{id:"数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),s("p",[t._v("数组手动设置 undefined 和 空白单元不一致")]),t._v(" "),s("p",[t._v("数组可以设置非数字索引 但是类似给对象添加属性 无法改变 length")]),t._v(" "),s("p",[t._v("类数组")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Determine if o is an array-like object.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Strings and functions have numeric length properties, but are")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// excluded by the typeof test. In client-side JavaScript, DOM text")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// nodes have a numeric length property, and may need to be excluded")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// with an additional o.nodeType != 3 test.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArrayLike")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("o")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    o "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// o is not null, undefined, etc.")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" o "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'object'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// o is an object")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isFinite")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// o.length is a finite number")]),t._v("\n    o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// o.length is non-negative")]),t._v("\n    o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("floor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// o.length is an integer")]),t._v("\n    o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4294967296")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// o.length < 2^32")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Then o is array-like")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Otherwise it is not")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("类数组对象转化为数组")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrLike"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2")]),t._v("\nArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrLike"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h4",{attrs:{id:"字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[t._v("#")]),t._v(" 字符串")]),t._v(" "),s("p",[t._v("翻转字符串")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("splice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将字符串已参数分割为数组")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reverse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 翻转数组")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n")])])]),s("p",[t._v("多数情况下 将字符串转换为数组更加便于处理")]),t._v(" "),s("h4",{attrs:{id:"数字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数字"}},[t._v("#")]),t._v(" 数字")]),t._v(" "),s("p",[t._v("JavaScript 中的数字类型是基于 IEEE 754 标准来实现的，该标准通常也被称为“浮点数”。JavaScript 使用的是“双精度”格式（即 64 位二进制）。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n")])])]),s("p",[t._v("简单来说，二进制浮点数中的 0.1 和 0.2 并不是十分精确，它们相加的结果并非刚好等于 0.3，而是一个比较接近的数字 0.30000000000000004，所以条件判断结果为 false。")]),t._v(" "),s("p",[t._v("怎么解决这个问题？")]),t._v(" "),s("ol",[s("li",[t._v("设置一个精度范围（机器精度） 如果是这个范围内的就默认是相等的")])]),t._v(" "),s("p",[s("strong",[t._v("Number.EPSILON")]),t._v(" Math.pow(2,-52)")]),t._v(" "),s("p",[t._v("整数的安全范围")]),t._v(" "),s("p",[t._v("Math.pow(2,53)-1")]),t._v(" "),s("p",[t._v("IEEE754 规定，双精度浮点数的有效数字是 52 有效数字实际可以存储 53 位。")]),t._v(" "),s("h5",{attrs:{id:"特殊的数值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特殊的数值"}},[t._v("#")]),t._v(" 特殊的数值")]),t._v(" "),s("p",[t._v("null undefined")]),t._v(" "),s("h5",{attrs:{id:"不是数字的数字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不是数字的数字"}},[t._v("#")]),t._v(" 不是数字的数字")]),t._v(" "),s("p",[t._v("NaN 计算失败的值 不等于自身 用 isNaN 判断类型")]),t._v(" "),s("h5",{attrs:{id:"无穷数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#无穷数"}},[t._v("#")]),t._v(" 无穷数")]),t._v(" "),s("p",[t._v("Infinity (1/0)")]),t._v(" "),s("h4",{attrs:{id:"值和引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#值和引用"}},[t._v("#")]),t._v(" 值和引用")]),t._v(" "),s("p",[t._v("！！我们无法自行决定使用值复制还是引用复制，一切由值的类型来决定。")]),t._v(" "),s("p",[t._v("赋值/参数传递是通过引用还是值复制完全由值的类型来决定，所以使用哪种类型也间接决定了赋值/参数传递的方式。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/e6c9d24egy1gzs83u3j13j211r0u0ae1.jpg",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"原生函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原生函数"}},[t._v("#")]),t._v(" 原生函数")]),t._v(" "),s("p",[t._v("String()\nNumber()\nBoolean()\nFunction()\nObject()\nArray()\nRegExp() 字面量 //\nDate()")]),t._v(" "),s("h4",{attrs:{id:"内部属性-class"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部属性-class"}},[t._v("#")]),t._v(" 内部属性 class")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断数据类型")]),t._v("\n")])])]),s("h4",{attrs:{id:"封装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#封装"}},[t._v("#")]),t._v(" 封装")]),t._v(" "),s("h3",{attrs:{id:"强制类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强制类型转换"}},[t._v("#")]),t._v(" 强制类型转换")]),t._v(" "),s("h3",{attrs:{id:"语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[t._v("#")]),t._v(" 语法")]),t._v(" "),s("h2",{attrs:{id:"异步和性能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异步和性能"}},[t._v("#")]),t._v(" 异步和性能")]),t._v(" "),s("h3",{attrs:{id:"异步-现在与将来"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异步-现在与将来"}},[t._v("#")]),t._v(" 异步：现在与将来")]),t._v(" "),s("h4",{attrs:{id:"事件循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件循环"}},[t._v("#")]),t._v(" 事件循环")]),t._v(" "),s("p",[t._v("JavaScript 引擎本身所做的只不过是在需要的时候，在给定的任意时刻执行程序中的单个代码块。")]),t._v(" "),s("p",[t._v("JavaScript 引擎本身并没有时间的概念，只是一个按需执行 JavaScript 任意代码片段的环境。“事件”（JavaScript 代码执行）调度总是由包含它的环境进行。-- 由宿主程序来调度 JavaScript 代码的执行")]),t._v(" "),s("p",[t._v("什么是事件循环？")]),t._v(" "),s("p",[t._v("一个持续运行的程序 从一个循环队列获取需要执行的代码块 ，一个个拿出来执行")]),t._v(" "),s("p",[t._v("setTimeout(..)并没有把你的回调函数挂在事件循环队列中。它所做的是设定一个定时器。当定时器到时后，环境会把你的回调函数放在事件循环中，这样，在未来某个时刻的 tick 会摘下并执行这个回调。")]),t._v(" "),s("h4",{attrs:{id:"并行线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#并行线程"}},[t._v("#")]),t._v(" 并行线程")]),t._v(" "),s("p",[t._v("单线程的好处是代码块按照栈的方式一个个运行无法同时在某一个时间点同时处理一个变量 而是又函数的不确定性去解决")]),t._v(" "),s("h4",{attrs:{id:"并发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#并发"}},[t._v("#")]),t._v(" 并发")]),t._v(" "),s("p",[t._v("同一“进程”维护自己的事件循环队列")]),t._v(" "),s("h4",{attrs:{id:"任务队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#任务队列"}},[t._v("#")]),t._v(" 任务队列")]),t._v(" "),s("p",[t._v("它是挂在事件循环队列的每个 tick 之后的一个队列。在事件循环的每个 tick 中，可能出现的异步动作不会导致一个完整的新事件添加到事件循环队列中，而会在当前 tick 的任务队列末尾添加一个项目（一个任务）。")]),t._v(" "),s("p",[t._v("它是挂在事件循环队列的每个 tick 之后的一个队列。在事件循环的每个 tick 中，可能出现的异步动作不会导致一个完整的新事件添加到事件循环队列中，而会在当前 tick 的任务队列末尾添加一个项目（一个任务）。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/e6c9d24egy1gzsfgthi6kj21600u043b.jpg",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"回调"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#回调"}},[t._v("#")]),t._v(" 回调")]),t._v(" "),s("p",[t._v("回调面临的 2 个问题")]),t._v(" "),s("ol",[s("li",[t._v("回调不符合大脑思考逻辑")]),t._v(" "),s("li",[t._v("回调控制反转了 无法保证调用时传入的数据是自己定义的回调函数是可以用的 "),s("strong",[t._v("Promise 控制反转在反转 坚决不可信任性")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/e6c9d24egy1gzt8w27roej218k0m0wgf.jpg",alt:""}})]),t._v(" "),s("p",[t._v("缺乏顺序性和可信任性")]),t._v(" "),s("h3",{attrs:{id:"promise"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[t._v("#")]),t._v(" Promise")]),t._v(" "),s("p",[t._v("什么 Promise？")]),t._v(" "),s("h5",{attrs:{id:"未来值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#未来值"}},[t._v("#")]),t._v(" 未来值")]),t._v(" "),s("p",[t._v("未来值的一个重要特性：它可能成功，也可能失败。")]),t._v(" "),s("h5",{attrs:{id:"完成事件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#完成事件"}},[t._v("#")]),t._v(" 完成事件")]),t._v(" "),s("p",[t._v("一种在异步任务中作为两个或更多步骤的流程控制机制，时序上的 this-then-that。")]),t._v(" "),s("p",[t._v("事件侦听对象 evt 就是 Promise 的一个模拟。")]),t._v(" "),s("h4",{attrs:{id:"具有-then-方法的鸭子类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#具有-then-方法的鸭子类型"}},[t._v("#")]),t._v(" 具有 then 方法的鸭子类型")]),t._v(" "),s("p",[t._v("识别 Promise（或者行为类似于 Promise 的东西）就是定义某种称为 thenable 的东西，将其定义为任何具有 then(..)方法的对象和函数。我们认为，任何这样的值就是 Promise 一致的 thenable。")]),t._v(" "),s("p",[t._v("你肯定已经注意到 Promise 并没有完全摆脱回调。它们只是改变了传递回调的位置。我们并不是把回调传递给 foo(..)，而是从 foo(..)得到某个东西（外观上看是一个真正的 Promise），然后把回调传给这个东西。")]),t._v(" "),s("p",[t._v("如果向 Promise.resolve(..)传递一个非 Promise、非 thenable 的立即值，就会得到一个用这个值填充的 promise。")]),t._v(" "),s("h4",{attrs:{id:"链式流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链式流"}},[t._v("#")]),t._v(" 链式流")]),t._v(" "),s("p",[t._v("每次你对 Promise 调用 then(..)，它都会创建并返回一个新的 Promise，我们可以将其链接起来；")]),t._v(" "),s("p",[t._v("不管从 then(..)调用的完成回调（第一个参数）返回的值是什么，它都会被自动设置为被链接 Promise（第一点中的）的完成。")]),t._v(" "),s("p",[t._v("Promise 固有特性")]),t._v(" "),s("p",[t._v("调用 Promise 的 then(..)会自动创建一个新的 Promise 从调用返回")]),t._v(" "),s("p",[t._v("then 方法总会返回一个 promise 对象")]),t._v(" "),s("p",[t._v("在完成或拒绝处理函数内部，如果返回一个值或抛出一个异常，新返回的（可链接的）Promise 就相应地决议。")]),t._v(" "),s("p",[t._v("return 返回 resolve 异常 返回 reject")]),t._v(" "),s("p",[t._v("如果完成或拒绝处理函数返回一个 Promise，它将会被展开，这样一来，不管它的决议值是什么，都会成为当前 then(..)返回的链接 Promise 的决议值。")]),t._v(" "),s("p",[t._v("返回了一个 promise（或者类 promise） 这个.then 调用的结果就是这个")]),t._v(" "),s("p",[t._v("resolve 可以接收一个 reject 的 promise 所以返回的 promise 可能是完成状态也可能是拒绝状态 所以使用 resolve 名字更合适")]),t._v(" "),s("p",[t._v("reject(..)就是拒绝这个 promise；但 resolve(..)既可能完成 promise，也可能拒绝，要根据传入参数而定。如果传给 resolve(..)的是一个非 Promise、非 thenable 的立即值，这个 promise 就会用这个值完成。")]),t._v(" "),s("p",[t._v("但是，如果传给 resolve(..)的是一个真正的 Promise 或 thenable 值，这个值就会被递归展开，并且（要构造的）promise 将取用其最终决议值或状态。")]),t._v(" "),s("h3",{attrs:{id:"生成器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成器"}},[t._v("#")]),t._v(" 生成器")]),t._v(" "),s("p",[t._v("生成器可以让函数暂停 等到需要它的时候在调用函数的后半部分")]),t._v(" "),s("p",[t._v("解决的就是回调顺序问题")]),t._v(" "),s("p",[t._v("生成器是 ES6 的一个新的函数类型，它并不像普通函数那样总是运行到结束。取而代之的是，生成器可以在运行当中（完全保持其状态）暂停，并且将来再从暂停的地方恢复运行。")]),t._v(" "),s("p",[t._v("这种交替的暂停和恢复是合作性的而不是抢占式的，这意味着生成器具有独一无二的能力来暂停自身，这是通过关键字 yield 实现的。不过，只有控制生成器的迭代器具有恢复生成器的能力（通过 next(..)）。")]),t._v(" "),s("p",[t._v("在异步控制流程方面，生成器的关键优点是：生成器内部的代码是以自然的同步/顺序方式表达任务的一系列步骤。其技巧在于，我们把可能的异步隐藏在了关键字 yield 的后面，把异步移动到控制生成器的迭代器的代码部分")]),t._v(" "),s("p",[t._v("换句话说，生成器为异步代码保持了顺序、同步、阻塞的代码模式，这使得大脑可以更自然地追踪代码，解决了基于回调的异步的两个关键缺陷之一")]),t._v(" "),s("h4",{attrs:{id:"async-await"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#async-await"}},[t._v("#")]),t._v(" async / await")]),t._v(" "),s("p",[t._v("一个 async 执行了 await 后面的执行也会变成异步")]),t._v(" "),s("h3",{attrs:{id:"程序性能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#程序性能"}},[t._v("#")]),t._v(" 程序性能")]),t._v(" "),s("h4",{attrs:{id:"webwork"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webwork"}},[t._v("#")]),t._v(" WebWork")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/e6c9d24egy1gzupycqvegj21140guab9.jpg",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"性能测试与调优"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#性能测试与调优"}},[t._v("#")]),t._v(" 性能测试与调优")])])}),[],!1,null,null,null);a.default=r.exports}}]);