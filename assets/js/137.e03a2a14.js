(window.webpackJsonp=window.webpackJsonp||[]).push([[137],{542:function(t,a,r){"use strict";r.r(a);var _=r(58),e=Object(_.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"网络"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#网络"}},[t._v("#")]),t._v(" 网络")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://juejin.cn/post/6844904100035821575",target:"_blank",rel:"noopener noreferrer"}},[t._v("（建议精读）HTTP 灵魂之问，巩固你的 HTTP 知识体系"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://juejin.cn/post/6856036933723521032",target:"_blank",rel:"noopener noreferrer"}},[t._v("六张图从HTTP/0.9进化到HTTP3.0"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("img",{attrs:{src:"https://tva1.sinaimg.cn/large/e6c9d24egy1h0gg6i27tcj21080tpjur.jpg",alt:""}})]),t._v(" "),r("p",[t._v("长连接")]),t._v(" "),r("h2",{attrs:{id:"_001-http-报文结构是怎样的"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_001-http-报文结构是怎样的"}},[t._v("#")]),t._v(" 001. HTTP 报文结构是怎样的？")]),t._v(" "),r("p",[t._v("http")]),t._v(" "),r("blockquote",[r("p",[t._v("起始行 + 头部 + 空行 + 实体")])]),t._v(" "),r("ul",[r("li",[t._v("请求报文\n"),r("ul",[r("li",[t._v("起始行 GET /home HTTP/1.1")]),t._v(" "),r("li",[t._v("头部 请求头")]),t._v(" "),r("li",[t._v("空行 区分头部和实体")]),t._v(" "),r("li",[t._v("实体 请求体")])])]),t._v(" "),r("li",[t._v("响应报文\n"),r("ul",[r("li",[t._v("起始行/状态行 HTTP/1.1 200 OK")]),t._v(" "),r("li",[t._v("响应头")]),t._v(" "),r("li",[t._v("空行 区分头部和实体")]),t._v(" "),r("li",[t._v("实体 响应体")])])])]),t._v(" "),r("h2",{attrs:{id:"_002-如何理解-http-的请求方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_002-如何理解-http-的请求方法"}},[t._v("#")]),t._v(" 002. 如何理解 HTTP 的请求方法？")]),t._v(" "),r("ul",[r("li",[t._v("GET: 通常用来获取资源")]),t._v(" "),r("li",[t._v("HEAD: 获取资源的元信息")]),t._v(" "),r("li",[t._v("POST: 提交数据，即上传数据")]),t._v(" "),r("li",[t._v("PUT: 修改数据")]),t._v(" "),r("li",[t._v("DELETE: 删除资源(几乎用不到)")]),t._v(" "),r("li",[t._v("CONNECT: 建立连接隧道，用于代理服务器")]),t._v(" "),r("li",[t._v("OPTIONS: 列出可对资源实行的请求方法，用来跨域请求")]),t._v(" "),r("li",[t._v("TRACE: 追踪请求-响应的传输路径")])]),t._v(" "),r("p",[t._v("GET 和 POST 有什么区别？")]),t._v(" "),r("ul",[r("li",[t._v("缓存")]),t._v(" "),r("li",[t._v("编码")]),t._v(" "),r("li",[t._v("参数")]),t._v(" "),r("li",[t._v("幂等性")]),t._v(" "),r("li",[t._v("TCP")])]),t._v(" "),r("h2",{attrs:{id:"_003-如何理解-uri"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_003-如何理解-uri"}},[t._v("#")]),t._v(" 003: 如何理解 URI？")]),t._v(" "),r("p",[t._v("URI 包含了 URN 和 URL")]),t._v(" "),r("h3",{attrs:{id:"uri-的结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#uri-的结构"}},[t._v("#")]),t._v(" URI 的结构")]),t._v(" "),r("p",[t._v("scheme\nuser:passwd@\nhost:port\npath\nquery\nfragment")]),t._v(" "),r("h3",{attrs:{id:"uri-编码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#uri-编码"}},[t._v("#")]),t._v(" URI 编码")]),t._v(" "),r("p",[t._v("URI 引入了编码机制，将所有非 ASCII 码字符和界定符转为十六进制字节值，然后在前面加个%")]),t._v(" "),r("h2",{attrs:{id:"_004-如何理解-http-状态码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_004-如何理解-http-状态码"}},[t._v("#")]),t._v(" 004: 如何理解 HTTP 状态码？")]),t._v(" "),r("p",[t._v("五类")]),t._v(" "),r("ul",[r("li",[t._v("1xx: 表示目前是协议处理的中间状态，还需要后续操作。")]),t._v(" "),r("li",[t._v("2xx: 表示成功状态。")]),t._v(" "),r("li",[t._v("3xx: 重定向状态，资源位置发生变动，需要重新请求。")]),t._v(" "),r("li",[t._v("4xx: 请求报文有误。")]),t._v(" "),r("li",[t._v("5xx: 服务器端发生错误")])]),t._v(" "),r("h3",{attrs:{id:"_1xx"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1xx"}},[t._v("#")]),t._v(" 1XX")]),t._v(" "),r("p",[t._v("101 Switching Protocols。在 HTTP 升级为 WebSocket 的时候，如果服务器同意变更，就会发送状态码 101")]),t._v(" "),r("h3",{attrs:{id:"_2xx"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2xx"}},[t._v("#")]),t._v(" 2XX")]),t._v(" "),r("p",[t._v("200 OK 是见得最多的成功状态码。通常在响应体中放有数据。\n204 No Content 含义与 200 相同，但响应头后没有 body 数据。\n206 Partial Content 顾名思义，表示部分内容，它的使用场景为 HTTP 分块下载和断点续传，当然也会带上相应的响应头字段 Content-Range。")]),t._v(" "),r("h3",{attrs:{id:"_3xx"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3xx"}},[t._v("#")]),t._v(" 3XX")]),t._v(" "),r("p",[t._v("301 Moved Permanently 即永久重定向，对应着 302 Found，即临时重定向。")]),t._v(" "),r("p",[t._v("比如你的网站从 HTTP 升级到了 HTTPS 了，以前的站点再也不用了，应当返回 301，这个时候浏览器默认会做缓存优化，在第二次访问的时候自动访问重定向的那个地址。")]),t._v(" "),r("p",[t._v("而如果只是暂时不可用，那么直接返回 302 即可，和 301 不同的是，浏览器并不会做缓存优化。")]),t._v(" "),r("p",[t._v("304 Not Modified: 当协商缓存命中时会返回这个状态码。详见浏览器缓存")]),t._v(" "),r("h3",{attrs:{id:"_4xx"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4xx"}},[t._v("#")]),t._v(" 4XX")]),t._v(" "),r("p",[t._v("400 Bad Request: 开发者经常看到一头雾水，只是笼统地提示了一下错误，并不知道哪里出错了。")]),t._v(" "),r("p",[t._v("403 Forbidden: 这实际上并不是请求报文出错，而是服务器禁止访问，原因有很多，比如法律禁止、信息敏感。")]),t._v(" "),r("p",[t._v("404 Not Found: 资源未找到，表示没在服务器上找到相应的资源。")]),t._v(" "),r("p",[t._v("405 Method Not Allowed: 请求方法不被服务器端允许。")]),t._v(" "),r("p",[t._v("406 Not Acceptable: 资源无法满足客户端的条件。")]),t._v(" "),r("p",[t._v("408 Request Timeout: 服务器等待了太长时间。")]),t._v(" "),r("p",[t._v("409 Conflict: 多个请求发生了冲突。")]),t._v(" "),r("p",[t._v("413 Request Entity Too Large: 请求体的数据过大。")]),t._v(" "),r("p",[t._v("414 Request-URI Too Long: 请求行里的 URI 太大。")]),t._v(" "),r("p",[t._v("429 Too Many Request: 客户端发送的请求过多。")]),t._v(" "),r("p",[t._v("431 Request Header Fields Too Large 请求头的字段内容太大。")]),t._v(" "),r("h3",{attrs:{id:"_5xx"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5xx"}},[t._v("#")]),t._v(" 5XX")]),t._v(" "),r("p",[t._v("500 Internal Server Error: 仅仅告诉你服务器出错了，出了啥错咱也不知道。")]),t._v(" "),r("p",[t._v("501 Not Implemented: 表示客户端请求的功能还不支持。")]),t._v(" "),r("p",[t._v("502 Bad Gateway: 服务器自身是正常的，但访问的时候出错了，啥错误咱也不知道。")]),t._v(" "),r("p",[t._v("503 Service Unavailable: 表示服务器当前很忙，暂时无法响应服务。")]),t._v(" "),r("h2",{attrs:{id:"_005-简要概括一下-http-的特点-http-有哪些缺点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_005-简要概括一下-http-的特点-http-有哪些缺点"}},[t._v("#")]),t._v(" 005: 简要概括一下 HTTP 的特点？HTTP 有哪些缺点")]),t._v(" "),r("h3",{attrs:{id:"http-特点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http-特点"}},[t._v("#")]),t._v(" HTTP 特点")]),t._v(" "),r("ul",[r("li",[t._v("灵活可扩展")]),t._v(" "),r("li",[t._v("可靠传输")]),t._v(" "),r("li",[t._v("请求-应答")]),t._v(" "),r("li",[t._v("无状态")])]),t._v(" "),r("h3",{attrs:{id:"缺点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),r("h4",{attrs:{id:"无状态"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#无状态"}},[t._v("#")]),t._v(" 无状态")]),t._v(" "),r("h4",{attrs:{id:"明文传输"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#明文传输"}},[t._v("#")]),t._v(" 明文传输")]),t._v(" "),r("h4",{attrs:{id:"队头阻塞"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#队头阻塞"}},[t._v("#")]),t._v(" 队头阻塞")]),t._v(" "),r("p",[t._v("当 http 开启长连接时，共用一个 TCP 连接，同一时刻只能处理一个请求，那么当前请求耗时过长的情况下，其它的请求只能处于阻塞状态，也就是著名的队头阻塞问题")]),t._v(" "),r("h2",{attrs:{id:"_006-对-accept-系列字段了解多少"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_006-对-accept-系列字段了解多少"}},[t._v("#")]),t._v(" 006: 对 Accept 系列字段了解多少？")]),t._v(" "),r("p",[t._v("对于 Accept 系列字段的介绍分为四个部分: 数据格式、压缩方式、支持语言和字符集。")]),t._v(" "),r("p",[t._v("总结")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://tva1.sinaimg.cn/large/e6c9d24egy1h0gm3a0qx2j21080iajsz.jpg",alt:""}})]),t._v(" "),r("h2",{attrs:{id:"_007-对于定长和不定长的数据-http-是怎么传输的"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_007-对于定长和不定长的数据-http-是怎么传输的"}},[t._v("#")]),t._v(" 007: 对于定长和不定长的数据，HTTP 是怎么传输的？")]),t._v(" "),r("h3",{attrs:{id:"定长包体"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#定长包体"}},[t._v("#")]),t._v(" 定长包体")]),t._v(" "),r("p",[r("code",[t._v("Content-Length")])]),t._v(" "),r("h3",{attrs:{id:"不定长包体"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#不定长包体"}},[t._v("#")]),t._v(" 不定长包体")]),t._v(" "),r("p",[r("code",[t._v("Transfer-Encoding: chunked")])]),t._v(" "),r("ul",[r("li",[t._v("Content-Length 字段会被忽略")]),t._v(" "),r("li",[t._v("基于长连接持续推送动态内容")])]),t._v(" "),r("div",{staticClass:"language-bash extra-class"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[t._v("chunk长度"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v("进制的数"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n第一个chunk的内容\nchunk长度"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v("进制的数"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n第二个chunk的内容\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),r("h2",{attrs:{id:"_008-http-如何处理大文件的传输"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_008-http-如何处理大文件的传输"}},[t._v("#")]),t._v(" 008: HTTP 如何处理大文件的传输？")]),t._v(" "),r("p",[t._v("采取了"),r("strong",[t._v("范围请求")]),t._v("的解决方案")]),t._v(" "),r("p",[r("code",[t._v("Accept-Ranges: none")])]),t._v(" "),r("h3",{attrs:{id:"range-字段拆解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#range-字段拆解"}},[t._v("#")]),t._v(" Range 字段拆解")]),t._v(" "),r("p",[t._v("请求"),r("em",[t._v("单段数据")]),t._v("和请求"),r("em",[t._v("多段数据")]),t._v("，响应头是不一样的")]),t._v(" "),r("h3",{attrs:{id:"单端数据"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#单端数据"}},[t._v("#")]),t._v(" 单端数据")]),t._v(" "),r("h3",{attrs:{id:"多段数据"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#多段数据"}},[t._v("#")]),t._v(" 多段数据")]),t._v(" "),r("h2",{attrs:{id:"_009-http-中如何处理表单数据的提交"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_009-http-中如何处理表单数据的提交"}},[t._v("#")]),t._v(" 009: HTTP 中如何处理表单数据的提交？")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("Content-Type:application/x-www-form-urlencoded")])]),t._v(" "),r("li",[r("p",[t._v("Content-Type:multipart/form-data")])])]),t._v(" "),r("h3",{attrs:{id:"x-www-form-urlencoded"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#x-www-form-urlencoded"}},[t._v("#")]),t._v(" x-www-form-urlencoded")]),t._v(" "),r("ul",[r("li",[t._v("其中的数据会被编码成以&分隔的键值对")]),t._v(" "),r("li",[t._v("字符以 URL 编码方式编码。")])]),t._v(" "),r("h3",{attrs:{id:"multipart-form-data"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#multipart-form-data"}},[t._v("#")]),t._v(" multipart/form-data")]),t._v(" "),r("ul",[r("li",[t._v("请求头中的 Content-Type 字段会包含 boundary，且 boundary 的值有浏览器默认指定。例: Content-Type: multipart/form-data;boundary=----WebkitFormBoundaryRRJKeWfHPGrS4LKe。")]),t._v(" "),r("li",[t._v("数据会分为多个部分，每两个部分之间通过分隔符来分隔，每部分表述均有 HTTP 头部描述子包体，如 Content-Type，在最后的分隔符会加上--表示结束。")])]),t._v(" "),r("p",[r("a",{attrs:{href:"https://learnku.com/articles/32034",target:"_blank",rel:"noopener noreferrer"}},[t._v("form-data、x-www-form-urlencoded 的区别"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("multipart/form-data：既可以上传文件等二进制数据，也可以上传表单键值对，只是最后会转化为一条信息；\nx-www-form-urlencoded：只能上传键值对，并且键值对都是间隔分开的。")]),t._v(" "),r("h3",{attrs:{id:"总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),r("p",[t._v("值得一提的是，multipart/form-data 格式最大的特点在于:每一个表单元素都是独立的资源表述。另外，你可能在写业务的过程中，并没有注意到其中还有 boundary 的存在，如果你打开抓包工具，确实可以看到不同的表单元素被拆分开了，之所以在平时感觉不到，是以为浏览器和 HTTP 给你封装了这一系列操作。")]),t._v(" "),r("p",[t._v("而且，在实际的场景中，对于图片等文件的上传，基本采用 multipart/form-data 而不用 application/x-www-form-urlencoded，因为没有必要做 URL 编码，带来巨大耗时的同时也占用了更多的空间。")]),t._v(" "),r("h2",{attrs:{id:"_010-http1-1-如何解决-http-的队头阻塞问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_010-http1-1-如何解决-http-的队头阻塞问题"}},[t._v("#")]),t._v(" 010: HTTP1.1 如何解决 HTTP 的队头阻塞问题？")]),t._v(" "),r("h3",{attrs:{id:"什么是-http-队头阻塞"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是-http-队头阻塞"}},[t._v("#")]),t._v(" 什么是 HTTP 队头阻塞？")]),t._v(" "),r("p",[t._v("请求任务被放在一个任务队列中串行执行，一旦队首的请求处理太慢，就会阻塞后面请求的处理")]),t._v(" "),r("h3",{attrs:{id:"并发连接"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#并发连接"}},[t._v("#")]),t._v(" 并发连接")]),t._v(" "),r("p",[t._v("对于一个域名允许分配多个长连接，那么相当于增加了任务队列")]),t._v(" "),r("p",[t._v("Chrome 中是 6 个。")]),t._v(" "),r("h3",{attrs:{id:"域名分片"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#域名分片"}},[t._v("#")]),t._v(" 域名分片")]),t._v(" "),r("p",[t._v("多域名或多二级域名")]),t._v(" "),r("h2",{attrs:{id:"_011-对-cookie-了解多少"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_011-对-cookie-了解多少"}},[t._v("#")]),t._v(" 011: 对 Cookie 了解多少？")]),t._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 请求头")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("Cookie")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" a"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("xxx"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("b"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("xxx\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 响应头")]),t._v("\nSet"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Cookie"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" a"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("xxx\nset"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Cookie"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" b"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("xxx\n\n")])])]),r("h3",{attrs:{id:"cookie-属性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cookie-属性"}},[t._v("#")]),t._v(" Cookie 属性")]),t._v(" "),r("h4",{attrs:{id:"生存周期"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#生存周期"}},[t._v("#")]),t._v(" 生存周期")]),t._v(" "),r("p",[t._v("Expires 即过期时间\nMax-Age 用的是一段时间间隔，单位是秒，从浏览器收到报文开始计算。")]),t._v(" "),r("h4",{attrs:{id:"作用域"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[t._v("#")]),t._v(" 作用域")]),t._v(" "),r("p",[t._v("Domain 和 path, 给 Cookie 绑定了域名和路径，在发送请求之前，发现域名或者路径和这两个属性不匹配，那么就不会带上 Cookie。值得注意的是，对于路径来说，/表示域名下的任意路径都允许使用 Cookie。")]),t._v(" "),r("h4",{attrs:{id:"安全相关"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#安全相关"}},[t._v("#")]),t._v(" 安全相关")]),t._v(" "),r("p",[t._v("Secure 说明只能通过 HTTPS 传输 cookie\nHttpOnly 只能通过 HTTP 协议传输，不能通过 JS 访问，这也是预防 XSS 攻击的重要手段。\nSameSite = Strict、Lax 和 None")]),t._v(" "),r("p",[t._v("Strict 浏览器完全禁止第三方请求携带 Cookie\nLax get 方法提交表单况或者 a 标签发送 get 请求的情况下可以携带 Cookie\nNone 请求会自动携带上 Cookie")]),t._v(" "),r("h3",{attrs:{id:"cookie-的缺点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cookie-的缺点"}},[t._v("#")]),t._v(" Cookie 的缺点")]),t._v(" "),r("ul",[r("li",[t._v("容量缺陷。Cookie 的体积上限只有 4KB，只能用来存储少量的信息")]),t._v(" "),r("li",[t._v("性能缺陷 有时候并不需要的时候带上了 cookie 带上以后有损耗")]),t._v(" "),r("li",[t._v("安全缺陷\n"),r("ul",[r("li",[t._v("纯文本的形式在浏览器和服务器中传递，很容易被非法用户截获并篡改")]),t._v(" "),r("li",[t._v("在 HttpOnly 为 false 的情况下，Cookie 信息能直接通过 JS 脚本来读取。")])])])]),t._v(" "),r("h2",{attrs:{id:"_012-如何理解-http-代理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_012-如何理解-http-代理"}},[t._v("#")]),t._v(" 012: 如何理解 HTTP 代理？")]),t._v(" "),r("p",[t._v("请求先到代理服务器 由代理服务器发起实际请求")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("负载均衡")])]),t._v(" "),r("li",[r("p",[t._v("保障安全")])]),t._v(" "),r("li",[r("p",[t._v("缓存代理")])])]),t._v(" "),r("h3",{attrs:{id:"相关头部字段"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#相关头部字段"}},[t._v("#")]),t._v(" 相关头部字段")]),t._v(" "),r("h4",{attrs:{id:"via"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#via"}},[t._v("#")]),t._v(" Via")]),t._v(" "),r("p",[t._v("Via 中代理的顺序即为在 HTTP 传输中报文传达的顺序")]),t._v(" "),r("h4",{attrs:{id:"x-forwarded-for"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#x-forwarded-for"}},[t._v("#")]),t._v(" X-Forwarded-For")]),t._v(" "),r("p",[t._v("字面意思就是为谁转发, 它记录的是请求方的 IP 地址(注意，和 Via 区分开，X-Forwarded-For 记录的是请求方这一个 IP)。")]),t._v(" "),r("h4",{attrs:{id:"x-real-ip"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#x-real-ip"}},[t._v("#")]),t._v(" X-Real-IP")]),t._v(" "),r("h2",{attrs:{id:"_013-如何理解-http-缓存及缓存代理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_013-如何理解-http-缓存及缓存代理"}},[t._v("#")]),t._v(" 013: 如何理解 HTTP 缓存及缓存代理？")]),t._v(" "),r("h3",{attrs:{id:"强缓存"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[t._v("#")]),t._v(" 强缓存")]),t._v(" "),r("h3",{attrs:{id:"协商缓存"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[t._v("#")]),t._v(" 协商缓存")]),t._v(" "),r("h3",{attrs:{id:"代理缓存"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#代理缓存"}},[t._v("#")]),t._v(" 代理缓存")]),t._v(" "),r("h4",{attrs:{id:"源服务器的缓存控制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#源服务器的缓存控制"}},[t._v("#")]),t._v(" 源服务器的缓存控制")]),t._v(" "),r("h4",{attrs:{id:"private-和-public"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#private-和-public"}},[t._v("#")]),t._v(" private 和 public")]),t._v(" "),r("p",[t._v("private 或者 public 表示是否允许代理服务器缓存，前者禁止，后者为允许")]),t._v(" "),r("h4",{attrs:{id:"proxy-revalidate"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#proxy-revalidate"}},[t._v("#")]),t._v(" proxy-revalidate")]),t._v(" "),r("p",[t._v("must-revalidate 的意思是客户端缓存过期就去源服务器获取，而 proxy-revalidate 则表示代理服务器的缓存过期后到源服务器获取。")]),t._v(" "),r("h4",{attrs:{id:"s-maxage"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#s-maxage"}},[t._v("#")]),t._v(" s-maxage")]),t._v(" "),r("p",[t._v("限定了缓存在代理服务器中可以存放多久")]),t._v(" "),r("p",[t._v("例子")]),t._v(" "),r("p",[r("code",[t._v("Cache-Control: public, max-age=1000, s-maxage=2000")])]),t._v(" "),r("p",[t._v("我这个响应是允许代理服务器缓存的，客户端缓存过期了到代理中拿，并且在客户端的缓存时间为 1000 秒，在代理服务器中的缓存时间为 2000 s。")]),t._v(" "),r("h4",{attrs:{id:"客户端的缓存控制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#客户端的缓存控制"}},[t._v("#")]),t._v(" 客户端的缓存控制")]),t._v(" "),r("p",[t._v("max-stale 缓存进行宽容\nmin-fresh 缓存进行限制\nonly-if-cached 只会接受代理缓存")]),t._v(" "),r("h2",{attrs:{id:"_014-什么是跨域-浏览器如何拦截响应-如何解决"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_014-什么是跨域-浏览器如何拦截响应-如何解决"}},[t._v("#")]),t._v(" 014: 什么是跨域？浏览器如何拦截响应？如何解决？")]),t._v(" "),r("p",[t._v("同源政策(scheme(协议)、host(主机)和port(端口)都相同则为同源)")]),t._v(" "),r("h3",{attrs:{id:"跨域的方案"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#跨域的方案"}},[t._v("#")]),t._v(" 跨域的方案")]),t._v(" "),r("h4",{attrs:{id:"cors"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cors"}},[t._v("#")]),t._v(" CORS")]),t._v(" "),r("h5",{attrs:{id:"简单请求"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#简单请求"}},[t._v("#")]),t._v(" 简单请求")]),t._v(" "),r("ul",[r("li",[t._v("请求方法为 GET、POST 或者 HEAD")]),t._v(" "),r("li",[t._v("请求头的取值范围: Accept、Accept-Language、Content-Language Content-Type")]),t._v(" "),r("li",[t._v("Content-Type(只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain)")])]),t._v(" "),r("p",[t._v("浏览器自动在请求头当中，添加一个Origin字段")]),t._v(" "),r("p",[t._v("Access-Control-Allow-Origin")]),t._v(" "),r("p",[t._v("服务器用来决定浏览器是否拦截这个响应，这是必需的字段。与此同时，其它一些可选的功能性的字段，用来描述如果不会拦截，这些字段将会发挥各自的作用。")]),t._v(" "),r("p",[t._v("Access-Control-Allow-Credentials")]),t._v(" "),r("p",[t._v("是否允许发送cookie\nwithCredentials 客户端也需要设置")]),t._v(" "),r("p",[t._v("Access-Control-Expose-Headers")]),t._v(" "),r("p",[t._v("允许客户端可以拿到 除包括Cache-Control、Content-Language、Content-Type、Expires、Last-Modified和Pragma外的响应头")]),t._v(" "),r("h5",{attrs:{id:"非简单请求"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#非简单请求"}},[t._v("#")]),t._v(" 非简单请求")]),t._v(" "),r("p",[t._v("预检请求")]),t._v(" "),r("p",[t._v("响应字段")]),t._v(" "),r("h5",{attrs:{id:"jsonp"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jsonp"}},[t._v("#")]),t._v(" JSONP")]),t._v(" "),r("p",[t._v("script标签不一样，它可以通过 src 填上目标地址从而发出 GET 请求，实现跨域请求并拿到响应")]),t._v(" "),r("h5",{attrs:{id:"nginx"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#nginx"}},[t._v("#")]),t._v(" Nginx")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("server {\n  listen  80;\n  server_name  client.com;\n  location /api {\n    proxy_pass server.com;\n  }\n}\n")])])]),r("h2",{attrs:{id:"_015-tls1-2-握手的过程是怎样的"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_015-tls1-2-握手的过程是怎样的"}},[t._v("#")]),t._v(" 015: TLS1.2 握手的过程是怎样的？")]),t._v(" "),r("p",[t._v("HTTPS = HTTP + SSL/TLS")]),t._v(" "),r("h2",{attrs:{id:"http2-0"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http2-0"}},[t._v("#")]),t._v(" http2.0")])])}),[],!1,null,null,null);a.default=e.exports}}]);